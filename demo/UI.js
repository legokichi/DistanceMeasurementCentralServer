// Generated by CoffeeScript 1.10.0
(function() {
  var HEIGHT, RULED_LINE_INTERVAL, TIME_DATA, VS, WIDTH, drgTrgPtr, main, points, socket;

  window["socket"] = socket = io(location.hostname + ":" + location.port + "/ui");

  socket.on("connect", console.info.bind(console, "connect"));

  socket.on("reconnect", console.info.bind(console, "reconnect"));

  socket.on("reconnect_attempt", console.info.bind(console, "reconnect_attempt"));

  socket.on("reconnecting", console.info.bind(console, "reconnecting"));

  socket.on("reconnect_error", console.info.bind(console, "reconnect_error"));

  socket.on("reconnect_failed", console.info.bind(console, "reconnect_failed"));

  socket.on("disconnect", console.info.bind(console, "disconnect"));

  socket.on("error", console.info.bind(console, "error"));

  WIDTH = 400;

  HEIGHT = 400;

  RULED_LINE_INTERVAL = 50;

  VS = [0, 0, "VS"];

  points = [];

  drgTrgPtr = null;

  TIME_DATA = null;

  socket.on("connect", function() {
    return socket.emit("colors");
  });

  socket.on("colors", function(datas) {
    return points = datas.map(function(arg) {
      var color, id;
      id = arg.id, color = arg.color;
      return [Math.random() * (WIDTH - 100) + 50, Math.random() * (HEIGHT - 100) + 50, color, id];
    });
  });

  socket.on("repos", function(_TIME_DATA) {
    var K, aliases, basePt, currentTimes, delayTimes, distances, ds, ids, now, pseudoPts, pulseTimes, recStartTimes, sdm;
    console.log("repos", _TIME_DATA);
    TIME_DATA = _TIME_DATA;
    pulseTimes = TIME_DATA.pulseTimes, delayTimes = TIME_DATA.delayTimes, aliases = TIME_DATA.aliases, recStartTimes = TIME_DATA.recStartTimes, now = TIME_DATA.now, currentTimes = TIME_DATA.currentTimes, distances = TIME_DATA.distances;
    ds = Object.keys(delayTimes).map(function(id1) {
      return Object.keys(delayTimes).map(function(id2) {
        return distances[id1][id2];
      });
    });
    ids = Object.keys(recStartTimes);
    pseudoPts = ids.map(function(id, i) {
      return new Point(Math.random() * 10, Math.random() * 10);
    });
    sdm = new SDM(pseudoPts, ds);
    K = 0;
    while (K++ < 200) {
      sdm.step();
    }
    console.info("calcRelPos", sdm.det());
    console.table(sdm.points);
    basePt = sdm.points[0];
    return points = sdm.points.map(function(pt, i) {
      return [WIDTH / 2 + (pt.x - basePt.x) * 50, HEIGHT / 2 + (pt.y - basePt.y) * 50, aliases[ids[i]], ids[i]];
    });
  });

  $(function() {
    $("#start").click(function() {
      socket.emit("start");
      return document.body.style.backgroundColor = "white";
    });
    $("#colors").click(function() {
      return socket.emit("colors");
    });
    $("#play").click(function() {
      if (TIME_DATA == null) {
        return;
      }
      TIME_DATA.wait = 4;
      TIME_DATA.now2 = Date.now();
      console.log("TIME_DATA", TIME_DATA);
      return socket.emit("play", TIME_DATA);
    });
    return new Processing($("#_cnv_")[0], main);
  });

  main = function(_) {
    _.mousePressed = function() {
      var i, l, len, point, ref, x, y;
      ref = [].concat([VS], points);
      for (i = l = 0, len = ref.length; l < len; i = ++l) {
        point = ref[i];
        x = point[0], y = point[1];
        if (Math.abs(x - _.mouseX) < 25 && Math.abs(y - _.mouseY) < 25) {
          drgTrgPtr = point;
          break;
        }
      }
    };
    _.mouseReleased = function() {
      return drgTrgPtr = null;
    };
    _.setup = function() {
      _.size(WIDTH, HEIGHT);
      VS = [50, 50, "VS", "VS"];
    };
    _.draw = function() {
      var R, __l, __x, __y, _volumes, _x, _y, a, distancesVS, i, id, j, k, l, len, len1, m, n, name, p, point, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, sum, volumes, x, y;
      if (drgTrgPtr != null) {
        drgTrgPtr[0] = _.mouseX;
        drgTrgPtr[1] = _.mouseY;
        distancesVS = points.map(function(point) {
          var _x, _y, x, y;
          x = point[0], y = point[1];
          _x = VS[0], _y = VS[1];
          return Math.sqrt(Math.pow(x - _x, 2) + Math.pow(y - _y, 2));
        });
        R = 3;
        a = R / (20 * Math.log10(2));
        sum = distancesVS.reduce((function(a, d) {
          return a + 1 / Math.pow(d, 2 * a);
        }), 0);
        k = 1 / Math.sqrt(sum);
        _volumes = distancesVS.map(function(d) {
          return k / Math.pow(d, a);
        });
        volumes = points.reduce((function(o, arg, i) {
          var color1, id1, x, y;
          x = arg[0], y = arg[1], color1 = arg[2], id1 = arg[3];
          o[id1] = _volumes[i];
          return o;
        }), {});
        socket.emit("volume", volumes);
      }
      _.background(255);
      _.stroke(127);
      for (i = l = ref = RULED_LINE_INTERVAL, ref1 = _.width, ref2 = RULED_LINE_INTERVAL; ref2 > 0 ? l <= ref1 : l >= ref1; i = l += ref2) {
        _.line(0, i, _.width, i);
      }
      for (i = m = ref3 = RULED_LINE_INTERVAL, ref4 = _.height, ref5 = RULED_LINE_INTERVAL; ref5 > 0 ? m <= ref4 : m >= ref4; i = m += ref5) {
        _.line(i, 0, i, _.height);
      }
      _.stroke(0);
      for (i = n = 0, len = points.length; n < len; i = ++n) {
        point = points[i];
        x = point[0], y = point[1];
        for (j = p = ref6 = i, ref7 = points.length; ref6 <= ref7 ? p < ref7 : p > ref7; j = ref6 <= ref7 ? ++p : --p) {
          if (!(i !== j)) {
            continue;
          }
          ref8 = points[j], _x = ref8[0], _y = ref8[1];
          _.line(x, y, _x, _y);
          __x = ((x - _x) / 2) + _x;
          __y = ((y - _y) / 2) + _y;
          __l = Math.sqrt(Math.pow(x - _x, 2) + Math.pow(y - _y, 2));
          _.text((__l / RULED_LINE_INTERVAL * 100 | 0) / 100, __x, __y);
        }
      }
      for (i = q = 0, len1 = points.length; q < len1; i = ++q) {
        point = points[i];
        x = point[0], y = point[1], name = point[2], id = point[3];
        _.fill(255);
        _.ellipse(x, y, 25, 25);
        _.fill(0);
        _.text(name, x + 10, y - 10);
        _.text((x | 0) + ", " + (y | 0), x + 10, y + 10);
      }
      x = VS[0], y = VS[1], name = VS[2];
      _.fill(128);
      _.ellipse(x, y, 25, 25);
      _.fill(0);
      _.text(name, x - 3, y + 5);
      _.text((x | 0) + ", " + (y | 0), x + 10, y + 10);
    };
  };

}).call(this);
