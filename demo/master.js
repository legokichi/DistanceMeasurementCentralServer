// Generated by CoffeeScript 1.10.0
(function() {
  var HEIGHT, MULTIPASS_DISTANCE, RULED_LINE_INTERVAL, SOUND_OF_SPEED, TIME_DATA, VIEW_SIZE, VS, WIDTH, _processing, main, points, socket;

  window["socket"] = socket = io(location.hostname + ":" + location.port + "/calc");

  socket.on("connect", console.info.bind(console, "connect"));

  socket.on("reconnect", console.info.bind(console, "reconnect"));

  socket.on("reconnect_attempt", console.info.bind(console, "reconnect_attempt"));

  socket.on("reconnecting", console.info.bind(console, "reconnecting"));

  socket.on("reconnect_error", console.info.bind(console, "reconnect_error"));

  socket.on("reconnect_failed", console.info.bind(console, "reconnect_failed"));

  socket.on("disconnect", console.info.bind(console, "disconnect"));

  socket.on("error", console.info.bind(console, "error"));

  socket.on("echo", console.info.bind(console, "echo"));

  socket.on("connect", function() {
    socket.emit("echo", socket.id);
    return socket.emit("colors");
  });

  WIDTH = 400;

  HEIGHT = 400;

  RULED_LINE_INTERVAL = 50;

  MULTIPASS_DISTANCE = 5;

  SOUND_OF_SPEED = 340;

  VIEW_SIZE = Math.pow(2, 12);

  TIME_DATA = null;

  VS = [0, 0, "VS"];

  points = [];

  main = function() {
    socket.on("colors", function(datas) {
      return points = datas.map(function(arg) {
        var color, id;
        id = arg[0], color = arg[1];
        return [Math.random() * (WIDTH - 100) + 50, Math.random() * (HEIGHT - 100) + 50, color, id];
      });
    });
    $("#colors").click(function() {
      return socket.emit("colors");
    });
    return $("#play").click(function() {
      var R, _volumes, a, aliases, currentTimes, delayTimes, delayTimesAliased, distances, distancesAliased, distancesVS, id, k, now, now2, pulseTimes, pulseTimesAliased, recStartTimes, sum, volumes, wait;
      wait = 0;
      distances = points.reduce((function(o, arg, i) {
        var color1, id1, x, y;
        x = arg[0], y = arg[1], color1 = arg[2], id1 = arg[3];
        o[id1] = points.reduce((function(o, arg1, j) {
          var _x, _y, color2, id2;
          _x = arg1[0], _y = arg1[1], color2 = arg1[2], id2 = arg1[3];
          o[id2] = Math.sqrt(Math.pow(x - _x, 2) + Math.pow(y - _y, 2));
          return o;
        }), {});
        return o;
      }), {});
      delayTimes = points.reduce((function(o, arg, i) {
        var color1, id1, x, y;
        x = arg[0], y = arg[1], color1 = arg[2], id1 = arg[3];
        o[id1] = points.reduce((function(o, arg1, j) {
          var _x, _y, color2, id2;
          _x = arg1[0], _y = arg1[1], color2 = arg1[2], id2 = arg1[3];
          o[id2] = distances[id1][id2] * 2 / SOUND_OF_SPEED;
          return o;
        }), {});
        return o;
      }), {});
      pulseTimes = points.reduce((function(o, arg, i) {
        var color1, id1, x, y;
        x = arg[0], y = arg[1], color1 = arg[2], id1 = arg[3];
        o[id1] = points.reduce((function(o, arg1, j) {
          var _x, _y, color2, id2;
          _x = arg1[0], _y = arg1[1], color2 = arg1[2], id2 = arg1[3];
          if (i === j) {
            o[id2] = 0;
          } else {
            o[id2] = 1;
          }
          return o;
        }), {});
        return o;
      }), {});
      recStartTimes = points.reduce((function(o, arg, i) {
        var color1, id1, x, y;
        x = arg[0], y = arg[1], color1 = arg[2], id1 = arg[3];
        o[id1] = 0;
        return o;
      }), {});
      currentTimes = points.reduce((function(o, arg, i) {
        var color1, id1, x, y;
        x = arg[0], y = arg[1], color1 = arg[2], id1 = arg[3];
        o[id1] = 2;
        return o;
      }), {});
      distancesVS = points.map(function(point) {
        var _x, _y, x, y;
        x = point[0], y = point[1];
        _x = VS[0], _y = VS[1];
        return Math.sqrt(Math.pow(x - _x, 2) + Math.pow(y - _y, 2));
      });
      R = 6;
      a = R / (20 * Math.log10(2));
      sum = distancesVS.reduce((function(a, d) {
        return a + 1 / Math.pow(d, 2 * a);
      }), 0);
      k = 1 / Math.sqrt(sum);
      _volumes = distancesVS.map(function(d) {
        return k / Math.pow(d, a);
      });
      volumes = points.reduce((function(o, arg, i) {
        var color1, id1, x, y;
        x = arg[0], y = arg[1], color1 = arg[2], id1 = arg[3];
        o[id1] = _volumes[i];
        return o;
      }), {});
      now = Date.now();
      now2 = Date.now();
      id = points[0][3];
      aliases = points.reduce((function(o, arg) {
        var color1, id1, x, y;
        x = arg[0], y = arg[1], color1 = arg[2], id1 = arg[3];
        o[id1] = color1;
        return o;
      }), {});
      distancesAliased = points.reduce((function(o, arg, i) {
        var color1, id1, x, y;
        x = arg[0], y = arg[1], color1 = arg[2], id1 = arg[3];
        o[aliases[id1]] = points.reduce((function(o, arg1, j) {
          var _x, _y, color2, id2;
          _x = arg1[0], _y = arg1[1], color2 = arg1[2], id2 = arg1[3];
          o[aliases[id2]] = distances[id1][id2];
          return o;
        }), {});
        return o;
      }), {});
      delayTimesAliased = points.reduce((function(o, arg, i) {
        var color1, id1, x, y;
        x = arg[0], y = arg[1], color1 = arg[2], id1 = arg[3];
        o[aliases[id1]] = points.reduce((function(o, arg1, j) {
          var _x, _y, color2, id2;
          _x = arg1[0], _y = arg1[1], color2 = arg1[2], id2 = arg1[3];
          o[aliases[id2]] = delayTimes[id1][id2];
          return o;
        }), {});
        return o;
      }), {});
      pulseTimesAliased = points.reduce((function(o, arg, i) {
        var color1, id1, x, y;
        x = arg[0], y = arg[1], color1 = arg[2], id1 = arg[3];
        o[aliases[id1]] = points.reduce((function(o, arg1, j) {
          var _x, _y, color2, id2;
          _x = arg1[0], _y = arg1[1], color2 = arg1[2], id2 = arg1[3];
          o[aliases[id2]] = pulseTimes[id1][id2];
          return o;
        }), {});
        return o;
      }), {});
      console.info("pulseTimesAliased");
      console.table(pulseTimesAliased);
      console.info("delayTimesAliased");
      console.table(delayTimesAliased);
      console.info("distancesAliased");
      console.table(distancesAliased);
      TIME_DATA = {
        wait: wait,
        pulseTimes: pulseTimes,
        delayTimes: delayTimes,
        id: id,
        currentTimes: currentTimes,
        recStartTimes: recStartTimes,
        now: now,
        now2: now2,
        volumes: volumes
      };
      return socket.emit("play", TIME_DATA);
    });
  };

  _processing = function(next) {
    var drgTrgPtr;
    drgTrgPtr = null;
    new Processing($("#_cnv_")[0], function(_) {
      _.mousePressed = function() {
        var i, l, len, point, ref, results, x, y;
        ref = [].concat([VS], points);
        results = [];
        for (i = l = 0, len = ref.length; l < len; i = ++l) {
          point = ref[i];
          x = point[0], y = point[1];
          if (Math.abs(x - _.mouseX) < 25 && Math.abs(y - _.mouseY) < 25) {
            drgTrgPtr = point;
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
      _.mouseReleased = function() {
        return drgTrgPtr = null;
      };
      _.setup = function() {
        _.size(WIDTH, HEIGHT);
        return VS = [50, 50, "VS", "VS"];
      };
      return _.draw = function() {
        var R, __l, __x, __y, _volumes, _x, _y, a, distancesVS, i, id, j, k, l, len, len1, m, n, name, p, point, q, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, sum, volumes, x, y;
        if (drgTrgPtr != null) {
          drgTrgPtr[0] = _.mouseX;
          drgTrgPtr[1] = _.mouseY;
          distancesVS = points.map(function(point) {
            var _x, _y, x, y;
            x = point[0], y = point[1];
            _x = VS[0], _y = VS[1];
            return Math.sqrt(Math.pow(x - _x, 2) + Math.pow(y - _y, 2));
          });
          R = 6;
          a = R / (20 * Math.log10(2));
          sum = distancesVS.reduce((function(a, d) {
            return a + 1 / Math.pow(d, 2 * a);
          }), 0);
          k = 1 / Math.sqrt(sum);
          _volumes = distancesVS.map(function(d) {
            return k / Math.pow(d, a);
          });
          volumes = points.reduce((function(o, arg, i) {
            var color1, id1, x, y;
            x = arg[0], y = arg[1], color1 = arg[2], id1 = arg[3];
            o[id1] = _volumes[i];
            return o;
          }), {});
          socket.emit("volume", volumes);
        }
        _.background(255);
        _.stroke(127);
        for (i = l = ref = RULED_LINE_INTERVAL, ref1 = _.width, ref2 = RULED_LINE_INTERVAL; ref2 > 0 ? l <= ref1 : l >= ref1; i = l += ref2) {
          _.line(0, i, _.width, i);
        }
        for (i = m = ref3 = RULED_LINE_INTERVAL, ref4 = _.height, ref5 = RULED_LINE_INTERVAL; ref5 > 0 ? m <= ref4 : m >= ref4; i = m += ref5) {
          _.line(i, 0, i, _.height);
        }
        _.stroke(0);
        for (i = n = 0, len = points.length; n < len; i = ++n) {
          point = points[i];
          x = point[0], y = point[1];
          for (j = p = ref6 = i, ref7 = points.length; ref6 <= ref7 ? p < ref7 : p > ref7; j = ref6 <= ref7 ? ++p : --p) {
            if (!(i !== j)) {
              continue;
            }
            ref8 = points[j], _x = ref8[0], _y = ref8[1];
            _.line(x, y, _x, _y);
            __x = ((x - _x) / 2) + _x;
            __y = ((y - _y) / 2) + _y;
            __l = Math.sqrt(Math.pow(x - _x, 2) + Math.pow(y - _y, 2));
            _.text((__l / RULED_LINE_INTERVAL * 100 | 0) / 100, __x, __y);
          }
        }
        for (i = q = 0, len1 = points.length; q < len1; i = ++q) {
          point = points[i];
          x = point[0], y = point[1], name = point[2], id = point[3];
          _.fill(255);
          _.ellipse(x, y, 25, 25);
          _.fill(0);
          _.text(name, x + 10, y - 10);
          _.text((x | 0) + ", " + (y | 0), x + 10, y + 10);
        }
        x = VS[0], y = VS[1], name = VS[2];
        _.fill(128);
        _.ellipse(x, y, 25, 25);
        _.fill(0);
        _.text(name, x - 3, y + 5);
        _.text((x | 0) + ", " + (y | 0), x + 10, y + 10);
      };
    });
    return next();
  };

  window.addEventListener("DOMContentLoaded", function() {
    return _processing(function() {
      return main();
    });
  });

}).call(this);
