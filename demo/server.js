// Generated by CoffeeScript 1.10.0
(function() {
  var app, bodyParser, express, formidable, io, request, requestLinear, requestParallel, server;

  bodyParser = require('body-parser');

  formidable = require('formidable');

  express = require('express');

  app = express();

  server = require('http').Server(app);

  io = require('socket.io')(server);

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.use(bodyParser.json());

  app.use('/', express["static"](__dirname + '/../demo'));

  io.of('/node').on('connection', function(socket) {
    socket.on('echo', function(data) {
      return socket.emit("echo", data);
    });
    socket.on('event', console.info.bind(console, "event"));
    socket.on('disconnect', console.info.bind(console, "disconnect"));
    return socket.on("colors", function(data) {
      return requestParallel("color").then(function(datas) {
        return io.of('/calc').emit("colors", datas);
      });
    });
  });

  io.of('/calc').on('connection', function(socket) {
    socket.on('echo', function(data) {
      return socket.emit("echo", data);
    });
    socket.on('event', console.info.bind(console, "event"));
    socket.on('disconnect', console.info.bind(console, "disconnect"));
    socket.on("volume", function(data) {
      return io.of('/node').sockets.map(function(socket) {
        return socket.emit("volume", data);
      });
    });
    socket.on("colors", function(data) {
      return requestParallel("color").then(function(datas) {
        return socket.emit("colors", datas);
      });
    });
    return socket.on("play", function(data) {
      console.log("play", data);
      return io.of('/node').emit("play", data);
    });
  });

  server.listen(8000);

  request = function(socket, eventName, data) {
    return new Promise(function(resolve, reject) {
      socket.on(eventName, function(data) {
        socket.removeAllListeners(eventName);
        return resolve(data);
      });
      return socket.emit(eventName, data);
    });
  };

  requestParallel = function(eventName, data) {
    var prms;
    prms = io.of('/node').sockets.map(function(socket) {
      return request(socket, eventName, data);
    });
    return Promise.all(prms);
  };

  requestLinear = function(eventName) {
    var prms;
    prms = io.of('/node').sockets.map(function(socket) {
      return function() {
        return request(socket, eventName, data);
      };
    });
    return prms.reduce((function(a, b) {
      return a.then(function() {
        return b();
      });
    }), Promise.resolve());
  };

}).call(this);
