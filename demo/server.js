// Generated by CoffeeScript 1.10.0
(function() {
  var app, bodyParser, express, formidable, fs, io, log, logging, logs, n, request, requestLinear, requestParallel, server, start;

  bodyParser = require('body-parser');

  formidable = require('formidable');

  express = require('express');

  app = express();

  server = require('http').Server(app);

  io = require('socket.io')(server);

  fs = require("fs");

  logs = [];

  log = function() {
    logs.push(Array.prototype.slice.call(arguments).join("\t"));
    return console.log.apply(console, arguments);
  };

  logging = function(str) {
    console.log("______LOG______", str);
    return fs.appendFile('./datalog.log', str + "\n", 'utf8', function(err) {
      if (err) {
        return console.log("______LOG______", err);
      }
    });
  };

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.use(bodyParser.json());

  app.use('/', express["static"](__dirname + '/../demo'));

  app.get('/start', function(req, res) {
    res.statusCode = 204;
    res.send();
    return start();
  });

  io.of('/node').on('connection', function(socket) {
    socket.on('disconnect', console.info.bind(console, "disconnect"));
    socket.on("reload", function() {
      return io.of("/node").emit("reload");
    });
    return socket.on("colors", function(data) {
      console.log(io.of("/node"));
      return requestParallel(io.of('/node'), "color").then(function(datas) {
        return io.of('/ui').emit("colors", datas);
      });
    });
  });

  io.of('/calc').on('connection', function(socket) {
    socket.on("log", function(data) {
      return logging("CALC" + ":" + JSON.stringify(data));
    });
    return socket.on('disconnect', console.info.bind(console, "disconnect"));
  });

  io.of('/ui').on('connection', function(socket) {
    socket.on('disconnect', console.info.bind(console, "disconnect"));
    socket.on("volume", function(data) {
      console.log("ui:volume->node:volume");
      return io.of('/node').emit("volume", data);
    });
    socket.on("start", function() {
      console.log("ui:start->server:start");
      return start();
    });
    socket.on("play", function(data) {
      console.log("ui:play->node:play");
      return io.of('/node').emit("play", data);
    });
    socket.on("colors", function(data) {
      console.log("ui:colors->node:colors->ui:colors");
      return requestParallel(io.of('/node'), "color").then(function(datas) {
        return socket.emit("colors", datas);
      });
    });
    return socket.on("log", function(data) {
      return logging("UI" + ":" + JSON.stringify(data));
    });
  });

  server.listen(8083);

  n = function(a) {
    return a.split("").map(Number);
  };

  start = function() {
    logging("START:" + new Date() + "");
    console.log("started");
    return Promise.resolve().then(function() {
      return requestParallel(io.of('/node'), "ready", {
        length: 10,
        seedA: n("0010000001"),
        seedB: n("0011111111"),
        carrier_freq: 4410
      });
    }).then(function() {
      return log("node:sockets", io.of('/node').sockets.map(function(socket) {
        return socket.id;
      }));
    }).then(function() {
      return log("ui:sockets", io.of('/ui').sockets.map(function(socket) {
        return socket.id;
      }));
    }).then(function() {
      return log("calc:sockets", io.of('/calc').sockets.map(function(socket) {
        return socket.id;
      }));
    }).then(function() {
      return requestParallel(io.of('/node'), "startRec");
    }).then(function() {
      var prms;
      prms = io.of('/node').sockets.map(function(socket) {
        return function() {
          return Promise.resolve().then(function() {
            return requestParallel(io.of('/node'), "startPulse", socket.id);
          }).then(function() {
            return request(socket, "beepPulse");
          }).then(function() {
            return log("beepPulse", socket.id);
          }).then(function() {
            return requestParallel(io.of('/node'), "stopPulse", socket.id);
          });
        };
      });
      return prms.reduce((function(a, b) {
        return a.then(function() {
          return b();
        });
      }), Promise.resolve());
    }).then(function() {
      return requestParallel(io.of('/node'), "stopRec");
    }).then(function() {
      return requestParallel(io.of('/node'), "sendRec");
    }).then(function(datas) {
      return requestParallel(io.of('/calc'), "calc", datas);
    }).then(function(datas) {
      return requestParallel(io.of('/ui'), "repos", datas[0]);
    }).then(function() {
      return console.info("end");
    }).then(function() {
      return setTimeout(start);
    })["catch"](function(err) {
      return console.error(err, err.stack);
    });
  };

  request = function(socket, eventName, data) {
    return new Promise(function(resolve, reject) {
      socket.on(eventName, function(data) {
        socket.removeAllListeners(eventName);
        return resolve(data);
      });
      return socket.emit(eventName, data);
    });
  };

  requestParallel = function(room, eventName, data) {
    var prms;
    console.log(eventName, data);
    prms = room.sockets.map(function(socket) {
      return request(socket, eventName, data);
    });
    return Promise.all(prms);
  };

  requestLinear = function(room, eventName) {
    var prms;
    prms = room.sockets.map(function(socket) {
      return function() {
        return request(socket, eventName, data);
      };
    });
    return prms.reduce((function(a, b) {
      return a.then(function() {
        return b();
      });
    }), Promise.resolve());
  };

}).call(this);
