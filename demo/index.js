// Generated by CoffeeScript 1.10.0
(function() {
  var abuf, actx, anode, freq, left, matchedA, matchedB, mseqA, mseqB, n, osc, processor, recbuf, right, signal, socket;

  window.navigator["getUserMedia"] = window.navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia || window.navigator.getUserMedia;

  window["socket"] = socket = io(location.hostname + ":" + location.port);

  socket.on("connect", console.info.bind(console, "connect"));

  socket.on("reconnect", console.info.bind(console, "reconnect"));

  socket.on("reconnect_attempt", console.info.bind(console, "reconnect_attempt"));

  socket.on("reconnecting", console.info.bind(console, "reconnecting"));

  socket.on("reconnect_error", console.info.bind(console, "reconnect_error"));

  socket.on("reconnect_failed", console.info.bind(console, "reconnect_failed"));

  socket.on("disconnect", console.info.bind(console, "disconnect"));

  socket.on("error", console.info.bind(console, "error"));

  socket.on("echo", console.info.bind(console, "echo"));

  socket.on("connect", function() {
    return socket.emit("echo", "hello");
  });

  this.view = function(arr, w, h) {
    var _view;
    if (w == null) {
      w = arr.length;
    }
    if (h == null) {
      h = 128;
    }
    _view = new SignalViewer(w, h);
    _view.zoomY = 30;
    _view.draw(arr);
    return document.body.appendChild(_view.cnv);
  };

  n = function(a) {
    return a.split("").map(Number);
  };

  actx = new AudioContext();

  osc = new OSC(actx);

  processor = actx.createScriptProcessor(Math.pow(2, 14), 1, 1);

  processor.connect(actx.destination);

  freq = 2205;

  mseqA = Signal.mseqGen(12, n("111000011001"));

  mseqB = Signal.mseqGen(12, n("101101010111"));

  matchedA = Signal.BPSK(mseqA, freq, actx.sampleRate, 0);

  matchedB = Signal.BPSK(mseqB, freq, actx.sampleRate, 0);

  signal = new Float32Array(matchedA.length * 2 + matchedB.length);

  signal.set(matchedA, 0);

  signal.set(matchedB, matchedA.length * 2);

  console.log(abuf = osc.createAudioBufferFromArrayBuffer(signal, actx.sampleRate));

  anode = osc.createAudioNodeFromAudioBuffer(abuf);

  anode.connect(actx.destination);

  anode.start(actx.currentTime + 1);

  recbuf = new RecordBuffer(actx.sampleRate, processor.bufferSize, processor.channelCount);

  processor.addEventListener("audioprocess", function(ev) {
    var correlA, correlB, i, idxA, idxB, idxs, marker, maxA, maxB, maxs, prevIdx, range, rawdata, recur, ref, ref1, relA, relB, searchRange, zoomA, zoomB;
    recbuf.add([new Float32Array(ev.inputBuffer.getChannelData(0))], actx.currentTime);
    if (actx.currentTime > abuf.duration + 1) {
      processor.disconnect();
      rawdata = recbuf.merge();
      view(rawdata, 1024);
      correlA = Signal.fft_smart_overwrap_correlation(rawdata, matchedA);
      correlB = Signal.fft_smart_overwrap_correlation(rawdata, matchedB);
      view(correlA, 1023);
      view(correlB, 1023);
      ref = Signal.Statictics.findMax(correlA), maxA = ref[0], idxA = ref[1];
      ref1 = Signal.Statictics.findMax(correlB), maxB = ref1[0], idxB = ref1[1];
      console.log(idxB, relB = idxA + matchedA.length * 2);
      console.log(idxA, relA = idxB - matchedA.length * 2);
      if (correlB[relB] + maxA > correlA[relA] + maxB) {
        idxB = relB;
        maxB = correlB[idxB];
      } else {
        idxA = relA;
        maxA = correlA[idxA];
      }
      marker = new Uint8Array(correlA.length);
      marker[idxA] = 255;
      marker[idxB] = 255;
      view(marker, 1024);
      range = 5 / 340 * actx.sampleRate | 0;
      view(zoomA = correlA.subarray(idxA - range, idxA + range));
      view(zoomB = correlB.subarray(idxB - range, idxB + range));
      i = 0;
      idxs = new Uint16Array(zoomB.length);
      maxs = new Float32Array(zoomB.length);
      prevIdx = 0;
      searchRange = 128;
      return (recur = function() {
        var begin, correl, idx, max, ref2;
        if (i > zoomB.length) {
          view(idxs);
          view(maxs);
          return;
        }
        correl = Signal.fft_smart_overwrap_correlation(zoomA, zoomB.subarray(i, zoomB.length));
        begin = i - searchRange < 0 ? 0 : i - searchRange;
        ref2 = Signal.Statictics.findMax(correl.subarray(begin, i + searchRange)), max = ref2[0], idx = ref2[1];
        idxs[i] = begin + idx;
        maxs[i] = max;
        i += 10;
        return setTimeout(recur);
      })();
    }
  });

  left = function(err) {
    throw err;
  };

  right = function(stream) {
    var source;
    source = actx.createMediaStreamSource(stream);
    return source.connect(processor);
  };

  navigator.getUserMedia({
    video: false,
    audio: true
  }, right, left);

}).call(this);
