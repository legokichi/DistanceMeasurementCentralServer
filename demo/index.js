// Generated by CoffeeScript 1.10.0
(function() {
  var actx, changeColor, gain, main, osc, play, socket;

  changeColor = function() {
    document.body.style.backgroundColor = location.hash.slice(1);
    return socket.emit("colors");
  };

  window.addEventListener("DOMContentLoaded", changeColor);

  window.addEventListener("hashchange", changeColor);

  window["socket"] = socket = io(location.hostname + ":" + location.port + "/node");

  socket.on("connect", console.info.bind(console, "connect"));

  socket.on("reconnect", console.info.bind(console, "reconnect"));

  socket.on("reconnect_attempt", console.info.bind(console, "reconnect_attempt"));

  socket.on("reconnecting", console.info.bind(console, "reconnecting"));

  socket.on("reconnect_error", console.info.bind(console, "reconnect_error"));

  socket.on("reconnect_failed", console.info.bind(console, "reconnect_failed"));

  socket.on("disconnect", console.info.bind(console, "disconnect"));

  socket.on("error", console.info.bind(console, "error"));

  socket.on("echo", console.info.bind(console, "echo"));

  socket.on("connect", function() {
    socket.emit("echo", socket.id);
    return socket.emit("colors");
  });

  window.onerror = function(err) {
    var pre, textnode;
    console.error(err, err != null ? err.stack : void 0);
    document.body.style.backgroundColor = "gray";
    pre = document.createElement("pre");
    textnode = document.createTextNode(err.stack || err);
    pre.appendChild(textnode);
    return document.body.appendChild(pre);
  };

  actx = new AudioContext();

  osc = new OSC(actx);

  gain = actx.createGain();

  gain.connect(actx.destination);

  main = function() {
    socket.on("color", function(data) {
      return socket.emit("color", [socket.id, location.hash.slice(1)]);
    });
    socket.on("play", function(data) {
      return play(data);
    });
    return socket.on("volume", function(data) {
      return gain.gain.value = data[socket.id];
    });
  };

  play = function(data) {
    var currentTimes, delayTimes, id, now, now2, offsetTime, pulseTimes, recStartTimes, wait;
    wait = data.wait, pulseTimes = data.pulseTimes, delayTimes = data.delayTimes, id = data.id, currentTimes = data.currentTimes, recStartTimes = data.recStartTimes, now = data.now, now2 = data.now2;
    offsetTime = recStartTimes[socket.id] + (pulseTimes[socket.id][id] - delayTimes[socket.id][id]) + (currentTimes[id] - (pulseTimes[id][id] + recStartTimes[id])) + (now2 - now) / 1000 + wait;
    return osc.createAudioBufferFromURL("./TellYourWorld1min.mp3").then(function(abuf) {
      var node;
      node = osc.createAudioNodeFromAudioBuffer(abuf);
      node.start(offsetTime + 1);
      node.loop = false;
      return node.connect(gain);
    });
  };

  window.addEventListener("DOMContentLoaded", function() {
    return main();
  });

}).call(this);
