// Generated by CoffeeScript 1.10.0
(function() {
  this.TimeSpreadEcho = (function() {
    function TimeSpreadEcho(pn, bufferSize) {
      this.pn = pn;
      this.bufferSize = bufferSize;
      this.cacheBufferA = new Float32Array(this.bufferSize * 2);
      this.cacheBufferB = new Float32Array(this.bufferSize * 2);
      this.cache = new Float32Array(this.bufferSize);
      this.offset = 300;
      this.beta = 0.08;
    }

    TimeSpreadEcho.prototype.encode = function(buffer) {
      var A, B, _, _kernel, _signal, conved, i, j, k, kernel, len, len1, ref, signal;
      signal = this.cacheBufferA;
      kernel = this.cacheBufferB;
      signal.set(buffer, 0);
      kernel.set(this.pn.map((function(_this) {
        return function(v, i) {
          return v * _this.beta * (_this.pn.length - i) / _this.pn.length;
        };
      })(this)), this.offset);
      kernel[0] = 1;
      _signal = Signal.fft(signal);
      _kernel = Signal.fft(kernel);
      ref = _signal.real;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        _ = ref[i];
        _signal.real[i] = _signal.real[i] * _kernel.real[i];
        _signal.imag[i] = _signal.imag[i] * _kernel.imag[i];
      }
      conved = Signal.ifft(_signal.real, _signal.imag);
      A = conved.subarray(0, conved.length / 2);
      B = conved.subarray(conved.length / 2, conved.length);
      for (i = k = 0, len1 = A.length; k < len1; i = ++k) {
        _ = A[i];
        this.cache[i] += conved[i];
      }
      buffer.set(this.cache, 0);
      this.cache = B;
    };

    TimeSpreadEcho.prototype.decode = function(buffer) {
      var _, _correl, _imag, _real, cepstrum, correl, imag, offset, real, ref, ref1;
      ref = Signal.fft(buffer), real = ref.real, imag = ref.imag;
      _real = real.map(function(v) {
        return Math.log(Math.abs(v));
      });
      _imag = imag.map(function(v, i) {
        return Math.atan2(real[i], imag[i]);
      });
      cepstrum = Signal.ifft(_real, _imag);
      correl = Signal.fft_smart_overwrap_correlation(cepstrum, this.pn);
      _correl = correl.map(function(v) {
        return v * v;
      });
      view(_correl, 1024);
      ref1 = Signal.Statictics.findMax(_correl), _ = ref1[0], offset = ref1[1];
      return offset;
    };

    return TimeSpreadEcho;

  })();

}).call(this);
