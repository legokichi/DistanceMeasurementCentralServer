// Generated by CoffeeScript 1.10.0
(function() {
  this.TimeSpreadEcho = (function() {
    function TimeSpreadEcho(actx, pn) {
      this.actx = actx;
      this.pn = pn;
      this.osc = new OSC(this.actx);
      this.offset = 30;
      this.beta = 1 / this.pn.length / 10;
      this.processor = this.actx.createScriptProcessor(Math.pow(2, 14), 1, 1);
      this.handler = (function(_this) {
        return function(ev) {
          var buffer;
          buffer = ev.inputBuffer.getChannelData(0);
          _this.process(buffer);
          return ev.outputBuffer.getChannelData(0).set(buffer, 0);
        };
      })(this);
      this.processor.addEventListener("audioprocess", this.handler);
      this.cacheBufferA = new Float32Array(this.processor.bufferSize * 2);
      this.cacheBufferB = new Float32Array(this.processor.bufferSize * 2);
      this.cache = new Float32Array(this.processor.bufferSize);
    }

    TimeSpreadEcho.prototype.process = function(buffer) {
      var A, B, _, _kernel, _signal, conved, i, j, k, kernel, len, len1, ref, signal;
      signal = this.cacheBufferA;
      kernel = this.cacheBufferB;
      signal.set(buffer, 0);
      kernel.set(this.pn.map((function(_this) {
        return function(v) {
          return v * _this.beta;
        };
      })(this)), this.offset);
      kernel[0] = 1;
      view(kernel, 1024);
      _signal = Signal.fft(signal);
      _kernel = Signal.fft(kernel);
      ref = _signal.real;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        _ = ref[i];
        _signal.real[i] = _signal.real[i] * _kernel.real[i];
        _signal.imag[i] = _signal.imag[i] * _kernel.imag[i];
      }
      conved = Signal.ifft(_signal.real, _signal.imag);
      A = conved.subarray(0, conved.length / 2);
      B = conved.subarray(conved.length / 2, conved.length);
      for (i = k = 0, len1 = A.length; k < len1; i = ++k) {
        _ = A[i];
        this.cache[i] += conved[i];
      }
      buffer.set(this.cache, 0);
      this.cache = B;
    };

    TimeSpreadEcho.prototype.destructor = function() {
      this.processor.removeEventListener("audioprocess", this.handler);
      return this.processor.disconnect();
    };

    return TimeSpreadEcho;

  })();

}).call(this);
