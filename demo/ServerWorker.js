// Generated by CoffeeScript 1.10.0
(function() {
  var IFrameServerWorker, InlineServerWorker, ServerWorker, createErrorLogger, getArrayBuffer, hash,
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ServerWorker = (function() {
    function ServerWorker() {
      var consts, fn, importFunctions, importScriptsURLs;
      importScriptsURLs = arguments[0], importFunctions = arguments[1], fn = arguments[2], consts = 4 <= arguments.length ? slice.call(arguments, 3) : [];
      this.importScriptsURLs = [];
      this.importFunctions = [];
      if (importScriptsURLs instanceof Function) {
        this.fn = importScriptsURLs;
        this.consts = [].concat(importFunctions, fn, consts);
      } else if (importFunctions instanceof Function && Array.isArray(importScriptsURLs)) {
        this.importScriptsURLs = importScriptsURLs;
        this.fn = importFunctions;
        this.consts = [].concat(fn, consts);
      } else {
        this.importScriptsURLs = importScriptsURLs;
        this.importFunctions = importFunctions;
        this.fn = fn;
        this.consts = [].concat(consts);
      }
      this.error = createErrorLogger(this.fn);
    }

    return ServerWorker;

  })();

  InlineServerWorker = (function(superClass) {
    extend(InlineServerWorker, superClass);

    function InlineServerWorker() {
      var consts, fn, importFunctions, importScriptsURLs;
      importScriptsURLs = arguments[0], importFunctions = arguments[1], fn = arguments[2], consts = 4 <= arguments.length ? slice.call(arguments, 3) : [];
      InlineServerWorker.__super__.constructor.apply(this, arguments);
      this.loadedURLs = [];
      this.worker = null;
    }

    InlineServerWorker.prototype.load = function() {
      return Promise.all(this.importScriptsURLs.map((function(_this) {
        return function(url) {
          return getArrayBuffer(url).then(function(buffer) {
            return URL.createObjectURL(new Blob([buffer], {
              "type": "text/javascript"
            }));
          });
        };
      })(this))).then((function(_this) {
        return function(urls) {
          var url;
          _this.loadedURLs = _this.loadedURLs.concat(urls);
          _this.loadedURLs.push(url = URL.createObjectURL(new Blob([
            (urls.map(function(url) {
              return "self.importScripts('" + url + "');";
            }).join("\n")) + "\n" + (_this.importFunctions.join("\n")) + "\n(" + _this.fn + ").apply(this, (function INCLUDE_FUNCTION_SOURCE(consts){\n    var events = {};\n    var conn = {\n      on: function on(event, listener){\n        events[event] = listener;\n      }\n    };\n    self.addEventListener(\"message\", function (ev){\n      var event = ev.data.event;\n      var data = ev.data.data;\n      var session = ev.data.session;\n      var listener = events[event];\n      function reply(data, transferable){\n        self.postMessage({data:data, session:session}, transferable);\n      }\n      listener(data, reply);\n    });\n    return [conn].concat(consts);\n})([" + (_this.consts.map(function(a) {
              return JSON.stringify(a);
            }).join(",")) + "]) );"
          ], {
            type: "text/javascript"
          })));
          _this.worker = new Worker(url);
          return _this;
        };
      })(this));
    };

    InlineServerWorker.prototype.request = function(event, data, transferable) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var _err, _msg, msg;
          msg = {
            event: event,
            data: data,
            session: hash()
          };
          _this.worker.addEventListener("error", _err = function(ev) {
            _this.worker.removeEventListener("error", _err);
            _this.worker.removeEventListener("message", _msg);
            _this.error(ev);
            return reject(ev);
          });
          _this.worker.addEventListener("message", _msg = function(ev) {
            if (msg.session === ev.data.session) {
              _this.worker.removeEventListener("error", _err);
              _this.worker.removeEventListener("message", _msg);
              return resolve(ev.data.data);
            }
          });
          _this.worker.postMessage(msg, transferable);
        };
      })(this));
    };

    InlineServerWorker.prototype.unload = function() {
      this.loadedURLs.forEach(function(url) {
        return URL.revokeObjectURL(url);
      });
      this.worker.terminate();
      this.worker = null;
    };

    return InlineServerWorker;

  })(ServerWorker);

  IFrameServerWorker = (function(superClass) {
    extend(IFrameServerWorker, superClass);

    function IFrameServerWorker() {
      var consts, fn, importFunctions, importScriptsURLs;
      importScriptsURLs = arguments[0], importFunctions = arguments[1], fn = arguments[2], consts = 4 <= arguments.length ? slice.call(arguments, 3) : [];
      IFrameServerWorker.__super__.constructor.apply(this, arguments);
      this.iframe = document.createElement("iframe");
      this.iframe.setAttribute("style", "position: absolute;\ntop: 0px;\nleft: 0px;\nwidth: 0px;\nheight: 0px;\nborder: 0px;\nmargin: 0px;\npadding: 0px;");
    }

    IFrameServerWorker.prototype.load = function() {
      var prm;
      document.body.appendChild(this.iframe);
      this.iframe.contentDocument.open();
      this.iframe.contentDocument.write((this.importScriptsURLs.map(function(url) {
        return "<script src='" + url + "'>\x3c/script>";
      }).join("\n")) + "\n<script>\n" + (this.importFunctions.join("\n")) + "\n(" + this.fn + ").apply(this, (function INCLUDE_FUNCTION_SOURCE(consts){\n    var events = {};\n    var conn = {\n      on: function on(event, listener){\n        events[event] = listener;\n      }\n    };\n    self.addEventListener(\"message\", function (ev){\n      var event = ev.data.event;\n      var data = ev.data.data;\n      var session = ev.data.session;\n      var source = ev.source;\n      var listener = events[event];\n      function reply(data, transferable){\n        source.postMessage({data:data, session:session}, \"*\")\n      }\n      listener(data, reply);\n    });\n    return [conn].concat(consts);\n})([" + (this.consts.map(function(a) {
        return JSON.stringify(a);
      }).join(",")) + "]) );\n\x3c/script>");
      prm = new Promise((function(_this) {
        return function(resolve) {
          return _this.iframe.addEventListener("load", function() {
            return resolve(_this);
          });
        };
      })(this));
      this.iframe.contentDocument.close();
      return prm;
    };

    IFrameServerWorker.prototype.request = function(event, data) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var _err, _msg, msg;
          msg = {
            event: event,
            data: data,
            session: hash()
          };
          _this.iframe.contentWindow.addEventListener("error", _err = function(ev) {
            _this.iframe.contentWindow.removeEventListener("error", _err);
            window.removeEventListener("message", _msg);
            _this.error(ev);
            return reject(ev);
          });
          window.addEventListener("message", _msg = function(ev) {
            if (msg.session === ev.data.session) {
              _this.iframe.contentWindow.removeEventListener("error", _err);
              window.removeEventListener("message", _msg);
              return resolve(ev.data.data);
            }
          });
          _this.iframe.contentWindow.postMessage(msg, "*");
        };
      })(this));
    };

    IFrameServerWorker.prototype.unload = function() {
      var iframe;
      this.iframe.removeAttribute("src");
      this.iframe.removeAttribute("srcdoc");
      this.iframe.contentWindow.removeEventListener();
      document.body.removeChild(this.iframe);
      iframe = null;
    };

    return IFrameServerWorker;

  })(ServerWorker);

  ;

  hash = function() {
    return Math.round(Math.random() * Math.pow(16, 8)).toString(16);
  };

  createErrorLogger = function(code) {
    return function(ev) {
      console.error(ev.message + "\n  at " + ev.filename + ":" + ev.lineno + ":" + ev.colno);
      ev.error && console.error(ev.error.stack);
      return console.info("(" + code + "}());".slice(0, 300) + "\n...");
    };
  };

  getArrayBuffer = function(url) {
    return new Promise(function(resolve, reject) {
      var xhr;
      xhr = new XMLHttpRequest();
      xhr.addEventListener("load", function() {
        if (200 <= xhr.status && xhr.status < 300) {
          if (xhr.response.error != null) {
            return reject(new Error(xhr.response.error.message));
          } else {
            return resolve(xhr.response);
          }
        } else {
          return reject(new Error(xhr.status));
        }
      });
      xhr.open("GET", url);
      xhr.responseType = "arraybuffer";
      return xhr.send();
    });
  };

  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports.InlineServerWorker = InlineServerWorker;
    module.exports.IFrameServerWorker = IFrameServerWorker;
  }

  this.InlineServerWorker = InlineServerWorker;

  this.IFrameServerWorker = IFrameServerWorker;

}).call(this);
