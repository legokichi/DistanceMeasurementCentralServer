// Generated by CoffeeScript 1.10.0
(function() {
  var changeColor, socket;

  window["socket"] = socket = io("localhost:8000");

  socket.on("connect", console.info.bind(console, "connect"));

  socket.on("reconnect", console.info.bind(console, "reconnect"));

  socket.on("reconnect_attempt", console.info.bind(console, "reconnect_attempt"));

  socket.on("reconnecting", console.info.bind(console, "reconnecting"));

  socket.on("reconnect_error", console.info.bind(console, "reconnect_error"));

  socket.on("reconnect_failed", console.info.bind(console, "reconnect_failed"));

  socket.on("disconnect", console.info.bind(console, "disconnect"));

  socket.on("error", console.info.bind(console, "error"));

  socket.on("echo", console.info.bind(console, "echo"));

  socket.on("connect", function() {
    return socket.emit("echo", "hello");
  });

  socket.on("ready", function() {
    return socket.emit("ready");
  });

  socket.on("startRec", function() {
    return socket.emit("startRec");
  });

  socket.on("startPulse", function() {
    return socket.emit("startPulse");
  });

  socket.on("beepPulse", function() {
    return socket.emit("beepPulse");
  });

  socket.on("stopPulse", function() {
    return socket.emit("stopPulse");
  });

  socket.on("stopRec", function() {
    return socket.emit("stopRec");
  });

  socket.on("sendRec", function() {
    return socket.emit("sendRec", {
      alias: location.hash.slice(1),
      id: socket.id,
      f32arr: new ArrayBuffer(1024)
    });
  });

  window.getSockets = function() {
    $.getJSON("../api/sockets").then(console.log.bind(console));
    return $.getJSON("../api/sockets");
  };

  changeColor = function() {
    return document.body.style.backgroundColor = location.hash.slice(1);
  };

  window.addEventListener("DOMContentLoaded", changeColor);

  window.addEventListener("hashchange", changeColor);

  window.onerror = function(err) {
    console.dir(err);
    return document.body.style.backgroundColor = "gray";
  };

}).call(this);
