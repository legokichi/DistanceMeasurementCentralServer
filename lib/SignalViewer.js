// Generated by CoffeeScript 1.10.0
this.SignalViewer = (function() {
  function SignalViewer(width, height) {
    this.cnv = document.createElement("canvas");
    this.cnv.width = width;
    this.cnv.height = height;
    this.ctx = this.cnv.getContext("2d");
    this.offsetX = 0;
    this.offsetY = this.cnv.height / 2;
    this.zoomX = 1;
    this.zoomY = 1;
    this.drawZero = true;
    this.drawAuto = true;
    this.drawStatus = true;
  }

  SignalViewer.prototype.text = function(str, x, y) {
    var fillStyle, font, lineWidth, o, ref, strokeStyle;
    ref = this.ctx, font = ref.font, lineWidth = ref.lineWidth, strokeStyle = ref.strokeStyle, fillStyle = ref.fillStyle;
    this.ctx.font = "35px";
    this.ctx.lineWidth = 4;
    this.ctx.strokeStyle = "white";
    this.ctx.strokeText(str, x, y);
    this.ctx.fillStyle = "black";
    this.ctx.fillText(str, x, y);
    o = {
      font: font,
      lineWidth: lineWidth,
      strokeStyle: strokeStyle,
      fillStyle: fillStyle
    };
    return Object.keys(o).forEach((function(_this) {
      return function(key) {
        return _this.ctx[key] = o[key];
      };
    })(this));
  };

  SignalViewer.prototype.draw = function(_arr) {
    var _, arr, i, max, min, ref, ref1;
    arr = _arr.map(function(v) {
      if (isFinite(v)) {
        return v;
      } else {
        return 0;
      }
    });
    ref = Signal.Statictics.findMax(arr), max = ref[0], _ = ref[1];
    ref1 = Signal.Statictics.findMin(arr), min = ref1[0], _ = ref1[1];
    if (this.drawAuto) {
      this.zoomX = this.cnv.width / arr.length;
      this.zoomY = this.cnv.height / (max - min + 0.0000001);
      this.offsetY = -min * this.zoomY;
    }
    if (this.drawZero) {
      this.ctx.beginPath();
      this.ctx.moveTo(0, this.cnv.height - (this.zoomY * 0 + this.offsetY));
      this.ctx.lineTo(this.cnv.width, this.cnv.height - (this.zoomY * 0 + this.offsetY));
      this.ctx.stroke();
      this.ctx.beginPath();
      this.ctx.moveTo(this.offsetX, this.cnv.height - 0);
      this.ctx.lineTo(this.offsetX, this.cnv.height - this.cnv.height);
      this.ctx.stroke();
    }
    this.ctx.beginPath();
    this.ctx.moveTo(this.zoomX * (0 + this.offsetX), this.cnv.height - (this.zoomY * arr[0] + this.offsetY));
    i = 0;
    while (i++ < arr.length) {
      this.ctx.lineTo(this.zoomX * (i + this.offsetX), this.cnv.height - (this.zoomY * arr[i] + this.offsetY));
    }
    this.ctx.stroke();
    if (this.drawStatus) {
      this.text("min:" + min, 5, 15);
      this.text("max:" + max, 5, 25);
      return this.text("len:" + arr.length, 5, 35);
    }
  };

  return SignalViewer;

})();
