// Generated by CoffeeScript 1.10.0
var SignalViewer;

SignalViewer = window["SignalViewer"];

this.Detector = (function() {
  function Detector(actx) {
    this.actx = actx;
    this.osc = new OSC(this.actx);
    this.abuf = null;
    this.signal = null;
  }

  Detector.prototype.init = function(data, next) {
    var pulseType;
    pulseType = data.pulseType;
    switch (pulseType) {
      case "mseq":
        return this.init_mseq(data, next);
      default:
        throw new Error("uknown pulse type " + pulseType);
    }
  };

  Detector.prototype.init_mseq = function(arg, next) {
    var carrierFreq, length, matchedA, matchedB, mseqA, mseqB, seedA, seedB;
    length = arg.length, seedA = arg.seedA, seedB = arg.seedB, carrierFreq = arg.carrierFreq;
    mseqA = Signal.mseqGen(length, seedA);
    mseqB = Signal.mseqGen(length, seedB);
    matchedA = Signal.BPSK(mseqA, carrierFreq, this.actx.sampleRate, 0);
    matchedB = Signal.BPSK(mseqB, carrierFreq, this.actx.sampleRate, 0);
    this.signal = new Float32Array(matchedA.length * 2 + matchedB.length);
    this.signal.set(matchedA, 0);
    this.signal.set(matchedB, matchedA.length * 2);
    this.abuf = this.osc.createAudioBufferFromArrayBuffer(this.signal, this.actx.sampleRate);
    return next();
  };

  Detector.prototype.beep = function(next) {
    var anode, recur, startTime;
    startTime = this.actx.currentTime;
    anode = this.osc.createAudioNodeFromAudioBuffer(this.abuf);
    anode.connect(this.actx.destination);
    anode.start(startTime);
    return (recur = (function(_this) {
      return function() {
        if ((startTime + _this.abuf.duration) < _this.actx.currentTime) {
          return setTimeout(next, 100);
        } else {
          return setTimeout(recur, 100);
        }
      };
    })(this))();
  };

  Detector.prototype.calc = function(f32arr) {
    var sampleRate, slideWidth, windowSize;
    sampleRate = this.actx.sampleRate;
    windowSize = Math.pow(2, 8);
    slideWidth = Math.pow(2, 4);
    new SignalViewer(f32arr.length / slideWidth, windowSize / 2).draw(f32arr).appendTo(document.body);
    return new SignalViewer(1024, 256).drawSpectrogram(f32arr, {
      sampleRate: sampleRate,
      windowSize: windowSize,
      slideWidth: slideWidth
    }).appendTo(document.body);
  };

  return Detector;

})();
