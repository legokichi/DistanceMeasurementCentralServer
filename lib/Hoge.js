// Generated by CoffeeScript 1.10.0
(function() {
  var Detector, RecordBuffer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RecordBuffer = window["duxca"]["lib"]["RecordBuffer"];

  Detector = window["Detector"];

  this._Hoge = (function() {
    function _Hoge(actx, color) {
      this.distribute = bind(this.distribute, this);
      this.actx = actx;
      this.color = color;
      this.isRecording = false;
      this.nextTick = null;
      this.pulseStartTime = {};
      this.pulseStopTime = {};
      this.processor = this.actx.createScriptProcessor(Math.pow(2, 14), 1, 1);
      this.processor.connect(this.actx.destination);
      this.processor.addEventListener("audioprocess", this.audioprocess.bind(this));
      this.gain = this.actx.createGain();
      this.gain.connect(this.actx.destination);
      this.recbuf = new RecordBuffer(this.actx.sampleRate, this.processor.bufferSize, this.processor.channelCount);
      this.detector = new Detector(this.actx);
    }

    _Hoge.prototype.audioprocess = function(ev) {
      var fn;
      if (this.isRecording) {
        this.recbuf.add([new Float32Array(ev.inputBuffer.getChannelData(0))], this.actx.currentTime);
      }
      if (this.nextTick instanceof Function) {
        fn = this.nextTick;
        this.nextTick = null;
        return fn();
      }
    };

    _Hoge.prototype.prepareRec = function(next) {
      var left, right;
      left = function(err) {
        throw err;
      };
      right = (function(_this) {
        return function(stream) {
          var source;
          source = _this.actx.createMediaStreamSource(stream);
          source.connect(_this.processor);
          return next();
        };
      })(this);
      return navigator.getUserMedia({
        video: false,
        audio: true
      }, right, left);
    };

    _Hoge.prototype.ready = function(data) {
      return (function(_this) {
        return function(next) {
          return _this.detector.init(data, next);
        };
      })(this);
    };

    _Hoge.prototype.startRec = function(next) {
      this.isRecording = true;
      return next();
    };

    _Hoge.prototype.startPulse = function(id) {
      return (function(_this) {
        return function(next) {
          _this.pulseStartTime[id] = _this.actx.currentTime;
          return next();
        };
      })(this);
    };

    _Hoge.prototype.beepPulse = function(next) {
      return this.detector.beep(next);
    };

    _Hoge.prototype.stopPulse = function(id) {
      return (function(_this) {
        return function(next) {
          return _this.nextTick = function() {
            _this.pulseStopTime[id] = _this.actx.currentTime;
            return next();
          };
        };
      })(this);
    };

    _Hoge.prototype.stopRec = function(next) {
      this.isRecording = false;
      return next();
    };

    _Hoge.prototype.getTimesAndRawData = function() {
      var f32arr, recStartTime, recStopTime, startStops;
      f32arr = this.recbuf.merge();
      recStartTime = this.recbuf.sampleTimes[0] - (this.recbuf.bufferSize / this.recbuf.sampleRate);
      recStopTime = this.recbuf.sampleTimes[this.recbuf.sampleTimes.length - 1];
      startStops = Object.keys(this.pulseStartTime).map((function(_this) {
        return function(id) {
          var startPtr, stopPtr;
          startPtr = (_this.pulseStartTime[id] - recStartTime) * _this.recbuf.sampleRate | 0;
          stopPtr = (_this.pulseStopTime[id] - recStartTime) * _this.recbuf.sampleRate | 0;
          return {
            id: id,
            startPtr: startPtr,
            stopPtr: stopPtr
          };
        };
      })(this));
      this.recbuf.clear();
      return {
        f32arr: f32arr,
        startStops: startStops
      };
    };

    _Hoge.prototype.collect = function(next) {
      var f32arr, ref, results, startStops;
      ref = this.getTimesAndRawData(), f32arr = ref.f32arr, startStops = ref.startStops;
      results = this.detector.calc(f32arr, startStops);
      return next({
        id: socket.id,
        color: this.color,
        results: results
      });
    };

    _Hoge.prototype.distribute = function(data) {
      return function(next) {
        data;
        data.forEach(function(arg) {
          var id, results;
          id = arg.id, results = arg.results;
          console.group(id);
          console.log(id);
          console.table(results);
          return console.groupEnd(id);
        });
        return next();
      };
    };

    _Hoge.prototype.collectRec = function(next) {
      var f32arr, ref, startStops;
      ref = this.getTimesAndRawData(), f32arr = ref.f32arr, startStops = ref.startStops;
      return next({
        id: socket.id,
        color: this.color,
        results: {
          f32arr: f32arr,
          startStops: startStops
        }
      });
    };

    _Hoge.prototype.play = function(data) {
      return console.log("play", data);
    };

    _Hoge.prototype.volume = function(data) {
      return console.log("volume", data);
    };

    return _Hoge;

  })();

}).call(this);
