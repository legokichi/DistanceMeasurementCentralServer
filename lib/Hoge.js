// Generated by CoffeeScript 1.10.0
var Detector, RecordBuffer;

RecordBuffer = window["RecordBuffer"];

Detector = window["Detector"];

this._Hoge = (function() {
  function _Hoge(actx) {
    this.actx = actx;
    this.isRecording = false;
    this.nextTick = null;
    this.pulseStartTime = {};
    this.pulseStopTime = {};
    this.processor = this.actx.createScriptProcessor(Math.pow(2, 14), 1, 1);
    this.processor.connect(this.actx.destination);
    this.processor.addEventListener("audioprocess", this.audioprocess.bind(this));
    this.gain = this.actx.createGain();
    this.gain.connect(this.actx.destination);
    this.recbuf = new RecordBuffer(this.actx.sampleRate, this.processor.bufferSize, this.processor.channelCount);
    this.detector = new Detector(this.actx);
  }

  _Hoge.prototype.audioprocess = function(ev) {
    var fn;
    if (this.isRecording) {
      this.recbuf.add([new Float32Array(ev.inputBuffer.getChannelData(0))], this.actx.currentTime);
    }
    if (this.nextTick instanceof Function) {
      fn = this.nextTick;
      this.nextTick = null;
      return fn();
    }
  };

  _Hoge.prototype.prepareRec = function(next) {
    var left, right;
    left = function(err) {
      throw err;
    };
    right = (function(_this) {
      return function(stream) {
        var source;
        source = _this.actx.createMediaStreamSource(stream);
        source.connect(_this.processor);
        return next();
      };
    })(this);
    return navigator.getUserMedia({
      video: false,
      audio: true
    }, right, left);
  };

  _Hoge.prototype.ready = function(data) {
    return (function(_this) {
      return function(next) {
        return _this.detector.init(data, next);
      };
    })(this);
  };

  _Hoge.prototype.startRec = function(next) {
    this.isRecording = true;
    return next();
  };

  _Hoge.prototype.startPulse = function(id) {
    return (function(_this) {
      return function(next) {
        _this.pulseStartTime[id] = _this.actx.currentTime;
        return next();
      };
    })(this);
  };

  _Hoge.prototype.beepPulse = function(next) {
    return this.detector.beep(next);
  };

  _Hoge.prototype.stopPulse = function(id) {
    return (function(_this) {
      return function(next) {
        return _this.nextTick = function() {
          _this.pulseStopTime[id] = _this.actx.currentTime;
          return next();
        };
      };
    })(this);
  };

  _Hoge.prototype.stopRec = function(next) {
    this.isRecording = false;
    setTimeout(this.calc.bind(this), 0);
    return next();
  };

  _Hoge.prototype.calc = function() {
    var f32arr;
    f32arr = this.recbuf.merge();
    this.detector.calc(f32arr);

    /*
    recStartTime = recbuf.sampleTimes[0] - (recbuf.bufferSize / recbuf.sampleRate)
    recStopTime = recbuf.sampleTimes[recbuf.sampleTimes.length-1]
    startStops = Object.keys(pulseStartTime).map (id)->
      startPtr = (pulseStartTime[id] - recStartTime) * recbuf.sampleRate|0
      stopPtr = (pulseStopTime[id] - recStartTime) * recbuf.sampleRate|0
      {id, startPtr, stopPtr}
    o =
      id: socket.id
      recStartTime: recStartTime
      recStopTime: recStopTime
      alias: location.hash.slice(1)
      startStops: startStops
      pulseStartTime: pulseStartTime
      pulseStopTime: pulseStopTime
      sampleTimes: recbuf.sampleTimes
      sampleRate: actx.sampleRate
      bufferSize: processor.bufferSize
      channelCount: processor.channelCount
      recF32arr: f32arr.buffer
      DSSS_SPEC: DSSS_SPEC
      currentTime: actx.currentTime
     */
    return this.recbuf.clear();
  };

  _Hoge.prototype.collect = function(next) {
    return next();
  };

  _Hoge.prototype.distribute = function(next) {
    return next();
  };

  _Hoge.prototype.play = function(data) {
    return console.log("play", data);
  };

  _Hoge.prototype.volume = function(data) {
    return console.log("volume", data);
  };

  return _Hoge;

})();
