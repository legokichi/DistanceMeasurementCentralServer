// Generated by CoffeeScript 1.10.0
(function() {
  var api_router, app, bodyParser, express, formidable, fs, io, request, requestLinear, requestParallel, server, start;

  bodyParser = require('body-parser');

  formidable = require('formidable');

  express = require('express');

  app = express();

  server = require('http').Server(app);

  io = require('socket.io')(server);

  fs = require("fs");

  api_router = express.Router();

  api_router.get('/sockets', function(req, res) {
    return res.json(io.sockets.sockets.map(function(a) {
      return a.id;
    }));
  });

  api_router.get('/start', function(req, res) {
    res.statusCode = 204;
    res.send();
    return start();
  });

  api_router.post("/push", function(req, res) {
    var form;
    form = new formidable.IncomingForm();
    form.encoding = "utf-8";
    form.uploadDir = "./uploads";
    form.parse(req, function(err, fields, files) {
      var newPath, oldPath;
      console.log(err, fields, files);
      oldPath = './' + files.file._writeStream.path;
      newPath = './uploads/' + Date.now() + "_" + files.file.name;
      return fs.rename(oldPath, newPath, function(err) {
        if (err) {
          throw err;
        }
      });
    });
    res.statusCode = 204;
    return res.send();
  });

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.use(bodyParser.json());

  app.use('/api', api_router);

  app.use('/demo', express["static"](__dirname + '/../demo'));

  app.get("/", function(req, res) {
    return res.redirect(301, '/demo' + req.path);
  });

  io.on('connection', function(socket) {
    console.log("connection", socket.client.id);
    socket.on('echo', function(data) {
      return socket.emit("echo", data);
    });
    socket.on('event', console.info.bind(console, "event"));
    socket.on('disconnect', console.info.bind(console, "disconnect"));
    return socket.on('start', start);
  });

  server.listen(8000);

  start = function() {
    return Promise.resolve().then(function() {
      return requestParallel("ready");
    }).then(function() {
      return requestParallel("startRec");
    }).then(function() {
      var a, prms;
      prms = io.sockets.sockets.map(function(socket) {
        return function() {
          return Promise.resolve().then(function() {
            return requestParallel("startPulse", socket.id);
          }).then(function() {
            return console.log("beepPulse", socket.id);
          }).then(function() {
            return request(socket, "beepPulse");
          }).then(function() {
            return requestParallel("stopPulse", socket.id);
          });
        };
      });
      a = prms.reduce((function(a, b) {
        return a.then(function() {
          return b();
        });
      }), Promise.resolve());
      return a["catch"](function(err) {
        return console.error(err, err.stack);
      });
    }).then(function() {
      return requestParallel("stopRec");
    }).then(function() {
      return requestParallel("sendRec");
    }).then(function(datas) {
      return console.log(datas);
    }).then(function() {
      return console.log("end");
    })["catch"](function(err) {
      return console.error(err, err.stack);
    });
  };

  request = function(socket, eventName, data) {
    return new Promise(function(resolve, reject) {
      socket.on(eventName, function(data) {
        socket.removeAllListeners(eventName);
        return resolve(data);
      });
      return socket.emit(eventName, data);
    });
  };

  requestParallel = function(eventName, data) {
    var prms;
    console.log("requestParallel", eventName);
    prms = io.sockets.sockets.map(function(socket) {
      return request(socket, eventName, data);
    });
    return Promise.all(prms);
  };

  requestLinear = function(eventName) {
    var prms;
    console.log("requestLinear", eventName);
    prms = io.sockets.sockets.map(function(socket) {
      return function() {
        return request(socket, eventName, data);
      };
    });
    return prms.reduce((function(a, b) {
      return a.then(function() {
        return b();
      });
    }), Promise.resolve());
  };

}).call(this);
