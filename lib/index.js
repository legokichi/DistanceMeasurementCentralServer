// Generated by CoffeeScript 1.10.0
var api_router, app, bodyParser, calc, experimentID, experimentStartID, express, formidable, fs, io, log, logs, request, requestLinear, requestParallel, server, start;

bodyParser = require('body-parser');

formidable = require('formidable');

express = require('express');

app = express();

server = require('http').Server(app);

io = require('socket.io')(server);

fs = require("fs");

experimentStartID = Date.now();

experimentID = null;

logs = [];

log = function() {
  logs.push(Array.prototype.slice.call(arguments).join("\t"));
  return console.log.apply(console, arguments);
};

console.info("experimentStartID:", experimentStartID);

api_router = express.Router();

api_router.get('/sockets', function(req, res) {
  return res.json(io.sockets.sockets.map(function(a) {
    return a.id;
  }));
});

api_router.get('/start', function(req, res) {
  experimentID = Date.now();
  res.statusCode = 204;
  res.send();
  return start();
});

api_router.post("/push", function(req, res) {
  var form;
  form = new formidable.IncomingForm();
  form.encoding = "utf-8";
  form.uploadDir = "./uploads";
  form.parse(req, function(err, fields, files) {
    var newPath, oldPath;
    console.info(err, fields, files);
    oldPath = './' + files.file._writeStream.path;
    newPath = './uploads/' + experimentID + "_" + Date.now() + "_" + files.file.name;
    return fs.rename(oldPath, newPath, function(err) {
      if (err) {
        throw err;
      }
    });
  });
  res.statusCode = 204;
  return res.send();
});

app.use(bodyParser.urlencoded({
  extended: true
}));

app.use(bodyParser.json());

app.use('/api', api_router);

app.use('/demo', express["static"](__dirname + '/../demo'));

app.get("/", function(req, res) {
  return res.redirect(301, '/demo' + req.path);
});

io.on('connection', function(socket) {
  console.info("connection", socket.client.id);
  socket.on('echo', function(data) {
    return socket.emit("echo", data);
  });
  socket.on('event', console.info.bind(console, "event"));
  socket.on('disconnect', console.info.bind(console, "disconnect"));
  return socket.on('start', start);
});

server.listen(8000);

start = function() {
  return Promise.resolve().then(function() {
    return requestParallel("ready");
  }).then(function() {
    return log("sockets", io.sockets.sockets.map(function(a) {
      return a.id;
    }));
  }).then(function() {
    return requestParallel("startRec");
  }).then(function() {
    var a, prms;
    prms = io.sockets.sockets.map(function(socket) {
      return function() {
        return Promise.resolve().then(function() {
          return requestParallel("startPulse", socket.id);
        }).then(function() {
          return request(socket, "beepPulse");
        }).then(function() {
          return log("beepPulse", socket.id);
        }).then(function() {
          return requestParallel("stopPulse", socket.id);
        });
      };
    });
    a = prms.reduce((function(a, b) {
      return a.then(function() {
        return b();
      });
    }), Promise.resolve());
    return a["catch"](function(err) {
      return error(err, err.stack);
    });
  }).then(function() {
    return requestParallel("stopRec");
  }).then(function() {
    return requestParallel("sendRec");
  }).then(function(datas) {
    return calc(datas);
  }).then(function() {
    return console.info("end");
  })["catch"](function(err) {
    return console.error(err, err.stack);
  });
};

request = function(socket, eventName, data) {
  return new Promise(function(resolve, reject) {
    socket.on(eventName, function(data) {
      socket.removeAllListeners(eventName);
      return resolve(data);
    });
    return socket.emit(eventName, data);
  });
};

requestParallel = function(eventName, data) {
  var prms;
  log("requestParallel", eventName);
  prms = io.sockets.sockets.map(function(socket) {
    return request(socket, eventName, data);
  });
  return Promise.all(prms);
};

requestLinear = function(eventName) {
  var prms;
  log("requestLinear", eventName);
  prms = io.sockets.sockets.map(function(socket) {
    return function() {
      return request(socket, eventName, data);
    };
  });
  return prms.reduce((function(a, b) {
    return a.then(function() {
      return b();
    });
  }), Promise.resolve());
};

calc = function(datas) {
  datas.forEach(function(data) {
    fs.writeFileSync("uploads/" + experimentStartID + "_" + experimentID + data.id + ".dat", data.f32arr);
    return data.f32arr = null;
  });
  fs.writeFileSync("uploads/" + experimentStartID + "_" + experimentID + ".json", JSON.stringify(datas, null, "  "));
  fs.writeFileSync("uploads/" + experimentStartID + "_" + experimentID + ".log", logs.join("\n"));
  logs = [];
  return console.log(datas);
};
