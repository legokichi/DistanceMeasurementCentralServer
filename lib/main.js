// Generated by CoffeeScript 1.10.0
var Chord, changeColor, chord, initChord, joinNodeId, main, setup, start;

window.navigator["getUserMedia"] = window.navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia || window.navigator.getUserMedia;

Chord = P2PRingNet.Chord;

chord = null;

joinNodeId = null;

setup = function(next) {
  var id;
  id = location.hash.slice(1);
  chord = new Chord(id, {
    host: location.hostname,
    port: location.port,
    path: "peerjs",
    secure: true,
    debug: 3
  });
  window["chord"] = chord;
  joinNodeId = location.search.slice(1);
  $("#joinNodeId").html(joinNodeId);
  $("#ping").click(function() {
    $("#ping").css("background-color", "yellow");
    return chord.request("ping").then(function() {
      return $("#ping").css("background-color", "lime");
    });
  });
  $("#start").click(function() {
    return start(chord);
  });
  $("#play").click(function() {
    return play(chord);
  });
  return next();
};

main = function(next) {
  var prm;
  if (joinNodeId) {
    prm = chord.join(joinNodeId);
  } else {
    prm = chord.create();
  }
  return prm.then(initChord).then(next);
};

initChord = function(chord) {
  chord.on("ping", function(token, cb) {
    console.log(token.payload.event, token.payload.data);
    return cb(token);
  });
  chord.on("ready", function(token, cb) {
    return cb();
  });
  chord.on("startRec", function(token, cb) {
    return cb();
  });
  chord.on("startPulse", function(token, cb) {
    return cb();
  });
  chord.on("beepPulse", function(token, cb) {
    return cb();
  });
  chord.on("stopPulse", function(token, cb) {
    return cb();
  });
  chord.on("stopRec", function(token, cb) {
    return cb();
  });
  chord.on("collect", function(token, cb) {
    return cb();
  });
  chord.on("distribute", function(token, cb) {
    return cb();
  });
  chord.on("play", function(token, cb) {
    return cb();
  });
  return chord.on("volume", function(token, cb) {
    return cb();
  });
};

start = function(chord) {
  return chord.request("ready").then(function(token) {
    return chord.request("startRec", null, token.route);
  }).then(function(token) {
    return token.payload.addressee.reduce(function(prm, id) {
      return prm.then(function(token) {
        return chord.request("startPulse", id, token.payload.addressee);
      }).then(function(token) {
        return chord.request("beepPulse", id, token.payload.addressee);
      }).then(function(token) {
        return chord.request("stopPulse", id, token.payload.addressee);
      });
    }, Promise.resolve(token));
  }).then(function(token) {
    return chord.request("stopRec", null, token.payload.addressee);
  }).then(function(token) {
    return chord.request("collect", {}, token.payload.addressee);
  }).then(function(token) {
    return chord.request("distribute", token.payload.data, token.payload.addressee);
  }).then(function(token) {
    return chord.request("play", (Date.now() - token.time[0]) * 1.5 / 1000 + 1, token.payload.addressee);
  }).then(function(token) {
    return console.info("end");
  });
};

changeColor = function() {
  return document.body.style.backgroundColor = location.hash.slice(1);
};

window.addEventListener("DOMContentLoaded", function() {
  return setup(function() {
    return main(function() {
      return changeColor();
    });
  });
});

window.addEventListener("hashchange", changeColor);
