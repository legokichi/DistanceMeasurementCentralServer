// Generated by CoffeeScript 1.10.0
(function() {
  var _Hoge, _hoge, actx, changeColor, initSocket, io, main, setup, socket;

  _Hoge = window["_Hoge"];

  io = window["io"];

  window.navigator["getUserMedia"] = window.navigator.getUserMedia || window.navigator.mozGetUserMedia || window.navigator.webkitGetUserMedia;

  actx = null;

  socket = null;

  _hoge = null;

  setup = function(next) {
    var id;
    id = location.hash.slice(1);
    actx = new AudioContext();
    _hoge = new _Hoge(actx);
    _hoge.prepareRec(function() {
      return initSocket(function() {
        return next();
      });
    });
    socket = io(location.hostname + ":" + location.port + "/");
    window["socket"] = actx;
    return window["socket"] = socket;
  };

  main = function(next) {
    return next();
  };

  initSocket = function(next) {
    socket.on("connect", console.info.bind(console, "connect"));
    socket.on("reconnect", console.info.bind(console, "reconnect"));
    socket.on("reconnect_attempt", console.info.bind(console, "reconnect_attempt"));
    socket.on("reconnecting", console.info.bind(console, "reconnecting"));
    socket.on("reconnect_error", console.info.bind(console, "reconnect_error"));
    socket.on("reconnect_failed", console.info.bind(console, "reconnect_failed"));
    socket.on("disconnect", console.info.bind(console, "disconnect"));
    socket.on("error", console.info.bind(console, "error"));
    socket.on("ready", function(a) {
      return _hoge.ready(a)(function() {
        return socket.emit("ready");
      });
    });
    socket.on("startRec", function() {
      return _hoge.startRec(function() {
        return socket.emit("startRec");
      });
    });
    socket.on("startPulse", function(a) {
      return _hoge.startPulse(a)(function() {
        return socket.emit("startPulse");
      });
    });
    socket.on("beepPulse", function() {
      return _hoge.beepPulse(function() {
        return socket.emit("beepPulse");
      });
    });
    socket.on("stopPulse", function(a) {
      return _hoge.stopPulse(a)(function() {
        return socket.emit("stopPulse");
      });
    });
    socket.on("stopRec", function() {
      return _hoge.stopRec(function() {
        return socket.emit("stopRec");
      });
    });
    socket.on("collect", function() {
      return _hoge.collect(function(a) {
        return socket.emit("collect", a);
      });
    });
    socket.on("distribute", function(a) {
      return _hoge.distribute(a)(function() {
        return socket.emit("distribute");
      });
    });
    socket.on("play", function(a) {
      return _hoge.play(a);
    });
    socket.on("volume", function(a) {
      return _hoge.volume(a);
    });
    socket.on("reload", function() {
      return location.reload();
    });
    return next();
  };

  changeColor = function() {
    return document.body.style.backgroundColor = location.hash.slice(1);
  };

  window.addEventListener("DOMContentLoaded", function() {
    return setup(function() {
      return main(function() {
        return changeColor();
      });
    });
  });

  window.addEventListener("hashchange", changeColor);

}).call(this);
